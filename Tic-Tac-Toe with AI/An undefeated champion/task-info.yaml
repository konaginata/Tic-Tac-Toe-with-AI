type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Random;
    import java.util.Scanner;

    import static java.lang.System.out;

    public class Main {
        private static boolean xWins;
        private static boolean oWins;
        private static int emptyCount;
        private static boolean inputCondition;
        private static boolean gameON = true;
        private static final String X_PLAYER = "xPlayer";
        private static final String O_PLAYER = "oPlayer";
        private static final char X = 'X';
        private static final char O = 'O';
        private static final char Z = ' ';
        private static final String USER = "user";
        private static final String EASY = "easy";
        private static final String MEDIUM = "medium";
        private static char[][] matrix;

        public static void main(String[] args) {
            while (gameON) {
                matrix = new char[][]{{Z, Z, Z}, {Z, Z, Z}, {Z, Z, Z}};
                xWins = false;
                oWins = false;
                emptyCount = 9;
                inputCondition = true;
                mainMenu();
            }
        }

        private static void mainMenu() {
            out.print("Input command:");
            Scanner scanner = new Scanner(System.in);
            String input = scanner.nextLine();
            String[] array = input.split(" ");
            if (input.equals("exit")) gameON = false;
            else gameMenu(array);
        }

        private static void gameMenu(String[] array) {
            if (array.length == 3 && array[0].equals("start")) {
                String xPlayerRole = array[1];
                String oPlayerRole = array[2];
                showGrid(matrix);
                gamePlay(xPlayerRole, oPlayerRole);
            } else {
                out.println("Bad parameters!");
            }
        }

        private static void gamePlay(String xPlayerRole, String oPlayerRole) {
            char currentMove = X;
            String currentPlayer = X_PLAYER;
            while (inputCondition) {
                if (currentPlayer.equals(X_PLAYER) && xPlayerRole.equals(USER)) {
                    makingTurn(currentMove);
                    currentMove = O;
                    currentPlayer = O_PLAYER;
                } else if (currentPlayer.equals(X_PLAYER) && xPlayerRole.equals(EASY)) {
                    aiEasy(currentMove);
                    currentMove = O;
                    currentPlayer = O_PLAYER;
                } else if (currentPlayer.equals(X_PLAYER) && xPlayerRole.equals(MEDIUM)) {
                    aiMedium(currentMove);
                    currentMove = O;
                    currentPlayer = O_PLAYER;
                } else if (currentPlayer.equals(O_PLAYER) && oPlayerRole.equals(USER)) {
                    makingTurn(currentMove);
                    currentMove = X;
                    currentPlayer = X_PLAYER;
                } else if (currentPlayer.equals(O_PLAYER) && oPlayerRole.equals(EASY)) {
                    aiEasy(currentMove);
                    currentMove = X;
                    currentPlayer = X_PLAYER;
                } else if (currentPlayer.equals(O_PLAYER) && oPlayerRole.equals(MEDIUM)) {
                    aiMedium(currentMove);
                    currentMove = X;
                    currentPlayer = X_PLAYER;
                }
                getTurnSummary();
            }
        }
        private static boolean isEmpty(int i1, int i2) {
            return matrix[i1][i2] == Z;
        }

        private static void getTurnSummary() {
            showGrid(matrix);
            findWinner();
            if (decisionMaker() != null) inputCondition = false;
            out.println(decisionMaker());
        }

        private static void aiMediumPass(char mark, int i, int i2) {
            matrix[i][i2] = mark;
            emptyCount--;
            out.println("Making move level \"medium\"");
        }

        private static void aiMedium(char mark) {
            if (isEmpty(1, 1)
                    && (matrix[0][0] == matrix[2][2] && !isEmpty(0, 0)
                    || matrix[2][0] == matrix[0][2] && !isEmpty(2, 0)
                    || matrix[1][0] == matrix[1][2] && !isEmpty(1, 0)
                    || matrix[0][1] == matrix[2][1] && !isEmpty(0, 1)))
                aiMediumPass(mark, 1, 1);
            else if (isEmpty(0, 1)
                    && (matrix[0][0] == matrix[0][2] && !isEmpty(0, 0)
                    || matrix[1][1] == matrix[2][1] && !isEmpty(1, 1)))
                aiMediumPass(mark, 0, 1);
            else if (isEmpty(2, 1)
                    && (matrix[2][0] == matrix[2][2] && !isEmpty(2, 0)
                    || matrix[0][1] == matrix[1][1] && !isEmpty(0, 1)))
                aiMediumPass(mark, 2, 1);
            else if (isEmpty(1, 0)
                    && (matrix[1][1] == matrix[1][2] && !isEmpty(1, 1)
                    || matrix[0][0] == matrix[2][0] && !isEmpty(0, 0)))
                aiMediumPass(mark, 1, 0);
            else if (isEmpty(1, 2)
                    && (matrix[1][0] == matrix[1][1] && !isEmpty(1, 0)
                    || matrix[0][2] == matrix[2][2] && !isEmpty(0, 2)))
                aiMediumPass(mark, 1, 2);
            else if (isEmpty(0, 0)
                    && (matrix[0][1] == matrix[0][2] && !isEmpty(0, 1)
                    || matrix[1][0] == matrix[2][0] && !isEmpty(1, 0)))
                aiMediumPass(mark, 0, 0);
            else if (isEmpty(0, 2)
                    && (matrix[0][0] == matrix[0][1] && !isEmpty(0, 0)
                    || matrix[1][2] == matrix[2][2] && !isEmpty(1, 2)
                    || matrix[2][0] == matrix[1][1] && !isEmpty(2, 0)))
                aiMediumPass(mark, 0, 2);
            else if (isEmpty(2, 0)
                    && (matrix[2][1] == matrix[2][2] && !isEmpty(2, 1)
                    || matrix[0][0] == matrix[1][0] && !isEmpty(0, 0)
                    || matrix[1][1] == matrix[0][2] && !isEmpty(1, 1)))
                aiMediumPass(mark, 2, 0);
            else if (isEmpty(2, 2)
                    && (matrix[2][0] == matrix[2][1] && !isEmpty(2, 0)
                    || matrix[0][2] == matrix[1][2] && !isEmpty(0, 2)
                    || matrix[0][0] == matrix[1][1] && !isEmpty(0, 0)))
                aiMediumPass(mark, 2, 2);
            else
                aiEasy(mark);
        }

        private static void aiEasy(char mark) {
            Random random = new Random();
            int i1 = random.nextInt(3);
            int i2 = random.nextInt(3);
            while (matrix[i1][i2] == X || matrix[i1][i2] == O) {
                i1 = random.nextInt(3);
                i2 = random.nextInt(3);
            }
            matrix[i1][i2] = mark;
            emptyCount--;
            out.println("Making move level \"easy\"");
        }

        static String decisionMaker() {
            if (emptyCount == 0) return "Draw";
            else if (xWins) return "X wins";
            else if (oWins) return "O wins";
            else return null;
        }

        static void findWinner() {
            char centralCell = matrix[1][1];
            if (centralCell == matrix[0][0] && centralCell == matrix[2][2]
                    || centralCell == matrix[0][1] && centralCell == matrix[2][1]
                    || centralCell == matrix[2][0] && centralCell == matrix[0][2]
                    || centralCell == matrix[1][0] && centralCell == matrix[1][2])
                winnerAnnouncement(1, 1);
            else if (matrix[0][0] == matrix[0][1] && matrix[0][0] == matrix[0][2]
                    || matrix[0][0] == matrix[1][0] && matrix[0][0] == matrix[2][0])
                winnerAnnouncement(0, 0);
            else if (matrix[2][2] == matrix[0][2] && matrix[2][2] == matrix[1][2]
                    || matrix[2][2] == matrix[2][0] && matrix[2][2] == matrix[2][1])
                winnerAnnouncement(2, 2);
        }

        private static void winnerAnnouncement(int i1, int i2) {
            if (matrix[i1][i2] == X) xWins = true;
            if (matrix[i1][i2] == O) oWins = true;
        }

        static boolean isDigit(String s) {
            String[] a = s.split(" ");
            try {
                Integer.valueOf(a[0]);
            } catch (NumberFormatException e) {
                out.println("You should enter numbers!");
                return false;
            }
            return true;
        }

        static void makingTurn(char currentMove) {
            Scanner scanner = new Scanner(System.in);
            out.print("Enter the coordinates: ");
            int i1 = 0;
            int i2 = 0;
            String move = scanner.nextLine();
            if (!isDigit(move)) {
                makingTurn(currentMove);
            } else {
                String[] moveArray = move.split(" ");
                i1 = Integer.parseInt(moveArray[0]);
                i2 = Integer.parseInt(moveArray[1]);
            }
            if (i1 < 1 || i1 > 3 || i2 < 1 || i2 > 3) {
                out.println("Coordinates should be from 1 to 3!");
                makingTurn(currentMove);
            } else if (matrix[i1 - 1][i2 - 1] != Z) {
                out.println("This cell is occupied! Choose another one!");
                makingTurn(currentMove);
            } else {
                matrix[i1 - 1][i2 - 1] = currentMove;
                emptyCount--;
            }
        }

        static void showGrid(char[][] matrix) {
            out.println("---------");
            out.println("| " + matrix[0][0] + " " + matrix[0][1] + " " + matrix[0][2] + " |");
            out.println("| " + matrix[1][0] + " " + matrix[1][1] + " " + matrix[1][2] + " |");
            out.println("| " + matrix[2][0] + " " + matrix[2][1] + " " + matrix[2][2] + " |");
            out.println("---------");
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/MiniMax.java
  visible: true
  learner_created: true
- name: src/tictactoe/Mark.java
  visible: true
  learner_created: true
- name: src/tictactoe/GameBoard.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 25 Dec 2021 19:16:09 UTC
record: 5
